[tool.mypy]
python_version = "3.10"
warn_unused_configs = true
show_error_codes = true
ignore_missing_imports = true

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.py$'
exclude = '_pb2\.py$|.venv|.dev'

[tool.ruff]
exclude = [
    "__init__.py", "*pb2*.py", "venv", "assembly", "playground", "./data_outlier_detector/core/migrations", "protos", "ata_query_builder_sdk/schema.py"
]
ignore = [
    # Docstrings (https://github.com/charliermarsh/ruff#pydocstyle-d)
    "D100", "D101", "D102", "D103", "D105", "D106", "D107", # missing docstrings
    "D200", # One-line docstring should fit on one line	-> disable as the auto-fixed line can violate line length rule
    "D202", # No blank lines allowed after function docstring (found {num_lines})
    "D203", # 1 blank line required before class docstring -> incompatible with D211
    "D205", # 1 blank line required between summary line and description -> lot of false positives
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "PLR2004", # Magic value used in comparison, consider replacing {...} with a constant variable
    "T201", # todo: temporarily enable print statements
    "PLR0913", # "Too many arguments to function call ({num_args} > {max_args})",
]
select = ["C90", "D1", "D2", "D3", "E", "F", "T2", "W", "C4", "T10", "TID", "PL", "N", "UP", "SIM", "I001"]

# Ignored for now : PGH for pedantic noqa's
line-length = 120
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"  # Allow unused variables when underscore-prefixed.
target-version = "py310"

[tool.poetry]
name = "tindermate"
version = "0.1.0"
description = ""
authors = ["Boris Rakovan <boris.rakovan@ataccama.com>"]

[tool.poetry.dependencies]
python = "^3.10"
openai = "^0.26.4"
tenacity = "^8.1.0"
python-dotenv = "^0.21.1"
Jinja2 = "^3.1.2"
pydantic = "^1.10.4"
textual = {extras = ["dev"], version = "^0.10.1"}
httpx = "^0.23.3"
ruff = "^0.0.252"
black = "^23.1.0"
mypy = "^1.0.1"

# Tests
pytest = {version="^7.2.1", optional = true}
pytest-asyncio = {version="0.20.3", optional = true}

[tool.poetry.extras]
test = ["pytest", "pytest-asyncio"]
#  poetry install -E test

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
